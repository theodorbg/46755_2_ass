import random

# Generate 300 random consumption profiles
# Each profile is:
#   - 1 hour
#   - Resolution: 1 minute
#   - lower bound: 220kW
#   - upper bound: 600kW
#   - change in consumption between two minutes <= 35kw
#   - |dC/dt| <= 35kw

class ConsumptionProfile:
    def __init__(self, lower_bound: float, upper_bound: float, max_change: float, resolution: int, duration: int):
        self.lower_bound = lower_bound
        self.upper_bound = upper_bound
        self.max_change = max_change
        self.resolution = resolution
        self.duration = duration
        self.profile = self.generate_profile()

    def generate_profile(self):
        

        profile = [random.uniform(self.lower_bound, self.upper_bound)]
        for _ in range(1, self.duration * 60 // self.resolution):
            change = random.uniform(-self.max_change, self.max_change)
            new_value = profile[-1] + change
            if new_value < self.lower_bound:
                new_value = self.lower_bound
            elif new_value > self.upper_bound:
                new_value = self.upper_bound
            profile.append(new_value)
        return profile


# Generate 300 random consumption profiles
consumption_profiles = [ConsumptionProfile(220, 600, 35, 1, 1) for _ in range(300)]

# Pick out 100 random profiles for in-sample and 200 for out-of-sample
in_sample_profiles = random.sample(consumption_profiles, 100)
out_sample_profiles = [profile for profile in consumption_profiles if profile not in in_sample_profiles]

# Verify the number of profiles
# print(f"Number of in-sample profiles: {len(in_sample_profiles)}")
# print(f"Number of out-of-sample profiles: {len(out_sample_profiles)}")

# # Verify the profile lengths
# for i, profile in enumerate(in_sample_profiles):
#     print(f"In-sample profile {i+1} length: {len(profile.profile)}")
# for i, profile in enumerate(out_sample_profiles):
#     print(f"Out-of-sample profile {i+1} length: {len(profile.profile)}")

# # Verify the profile bounds
# for i, profile in enumerate(in_sample_profiles):
#     print(f"In-sample profile {i+1} bounds: {min(profile.profile)} - {max(profile.profile)}")
# for i, profile in enumerate(out_sample_profiles):
#     print(f"Out-of-sample profile {i+1} bounds: {min(profile.profile)} - {max(profile.profile)}")

# Verify the profile changes are within the limits
for i, profile in enumerate(in_sample_profiles):
    changes = [abs(profile.profile[j] - profile.profile[j-1]) for j in range(1, len(profile.profile))]
    if any(change > profile.max_change for change in changes):
        print(f"In-sample profile {i+1} has changes exceeding the limit.")

# Visualize the first 10 in-sample profiles
import matplotlib.pyplot as plt
import numpy as np

for i in range(10):
    plt.plot(np.arange(0, 60, 1), in_sample_profiles[i].profile[:60], label=f'Profile {i+1}')
plt.xlabel('Time (minutes)')
plt.ylabel('Consumption (kW)')
plt.title('In-sample Consumption Profiles')
plt.legend()
plt.grid()
plt.show()

# Visualize the first 10 out-of-sample profiles
for i in range(10):
    plt.plot(np.arange(0, 60, 1), out_sample_profiles[i].profile[:60], label=f'Profile {i+1}')
plt.xlabel('Time (minutes)')
plt.ylabel('Consumption (kW)')
plt.title('Out-of-sample Consumption Profiles')
plt.legend()
plt.grid()
plt.show()